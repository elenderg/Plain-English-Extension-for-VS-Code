{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Plain English",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#entity"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#markup"
    },
    {
      "include": "#meta"
    },
    {
      "include": "#storage"
    },
    {
      "include": "#string"
    },
    {
      "include": "#operadores"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#support"
    },
    {
      "include": "#variable"
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "match": "(\\[.*?\\])",
          "name": "comment.block.plain"
        },
        {
          "match": "\\\\(.*)",
          "name": "comment.line.character.plain"
        },
        {
          "match": "(\\(.*?\\))",
          "name": "comment.block.documentation.plain"
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "name": "constant.numeric.integer.decimal.plain",
          "match": "\\b(-?[\\d]+)\\b"
        },
        {
          "name": "constant.numeric.integer.hexadecimal.plain",
          "match": "(\\$[a-fA-F\\d]+)"
        },
        {
          "name": "constant.numeric.integer.float.decimal.plain",
          "match": "\\b(-?[\\d]+\\-[\\d]+/[\\d]+)\\b"
        },
        {
          "name": "constant.language.plain",
          "match": "\\b(?i:(yes|no|null|nil|blank|empty))\\b"
        }
      ]
    },
    "entity": {
      "patterns": [
        {
          "name": "markup.italic.plain",
          "match": "\\b(called|original|next|previous|first|last|target)\\b"
        },
        {
          "name": "entity.name.type.simple.plain",
          "match": "(\\b(?<=(A|An|Some))\\b)\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\b(is|are|has)\\b)"
        },
        {
          "name": "entity.name.type.simple2.plain",
          "match": "(?<=(is a))\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\b(with)\\b)"
        },
        {
          "name": "entity.name.type.simple2.plain",
          "match": "(?<=(is a))\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\b(equal)\\b)"
        },
        {
          "name": "entity.name.type.simple3.plain",
          "match": "(?<=(is a))\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\b(to)\\b)"
        },
        {
          "name": "entity.name.type.simple4.plain",
          "match": "(?<=(is a))\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\.)"
        },
        {
          "name": "entity.name.type.pointer.plain",
          "match": "(?<=(is a))\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\b(to)\\b)"
        },
        {
          "name": "entity.name.type.pointer2.plain",
          "match": "(?<=(is an))\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\b(to)\\b)"
        },
        {
          "name": "entity.name.type.pointer3.plain",
          "match": "(?<=(is some))\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\b(to)\\b)"
        },
        {
          "name": "entity.name.type.pointer4.plain",
          "match": "(?<=(are some))\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\b(to)\\b)"
        },
        {
          "name": "entity.name.type.equal.plain",
          "match": "(\\b(?<=(a|an|some))\\b)\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\b(equal to)\\b)"
        },
        {
          "name": "variable.other.constant.plain",
          "match": "(\\b(?<=(The))\\b)\\s+([\\wÀ-ÿ_\\-\\s\/]*)\\s*(?=\\b(is|are|has)\\b)"
        },
        {
          "name": "entity.name.type.composite.plain",
          "match": "(\\b(record|thing)\\b)"
        },
        {
          "name": "storage.type.function.plain",
          "match": "\\s*\\bTo\\b"
        },
        {
          "name": "entity.name.function.invocation.postcomma.plain",
          "match": "(?<=(,|;))([\\wÀ-ÿ\\- ])([\\wÀ-ÿ\\- ]*?)(?=(\\b(\\d+|a|an|and|another|about|above|across|after|against|all|alone|along|among|any|anywhere|around|as|at|away|back|backward|backwards|before|beginning|behind|below|beneath|beside|between|beyond|bigger|both|but|by|called|close|deep|diagonally|down|downward|either|equal|ending|everywhere|except|finishing|facing|for|forward|from|given|giving|high|in|inside|into|larger|leaning|left|leftward|leftways|like|limiting|long|near|neither|nor|of|off|on|only|onto|or|out|outside|over|past|pointing|returning|right|rightward|rightways|shorter|sideway|sideways|similar|smaller|some|somewhere|slantwise|slantway|slantways|starting|tall|taller|the|thru|through|throughout|to|toward|towards|under|underneath|until|unto|up|upward|upon|using|via|while|wide|with|within|without)\\b|\"|;|\\(|(\\$[a-fA-F\\d]+)))"
        },
        {
          "name": "entity.name.variable.struct.member.plain",
          "match": "(?<=\\s*\\b(A|An|Some|called)\\b\\s+)(?:(?!(called)).)+?(?=\\s*(?:,|\\(|\\[|\\.|\\b(and|or)\\b))"
        },
        {
          "name": "entity.name.type.struct.field.plain",
          "match": "((?<=\\s*\\b(A|a|An|an|Some|some|\\d)\\b\\s+)([\\wÀ-ÿ_\\-].*?)(?=\\s+\\b(called)\\b))"
        },
        {
          "name": "entity.name.type.struct.member.plain",
          "match": "((?<=\\s+(a|an|some|\\d)\\s+)([\\wÀ-ÿ_\\-]*)(?=\\s+\\b(called)\\b))"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "invalid.deprecated.plain",
          "match": "\\b(?i:(Intel|Call|Privatize))\\b"
        },
        {
          "name": "keyword.punctuation.terminator.plain",
          "match": "\\;|\\.|\\,|\\:"
        },
        {
          "name": "keyword.other.parameters.begin.plain",
          "match": "\\b(the|a|an|some|another)\\b"
        },
        {
          "name": "keyword.control.plain",
          "match": "\\b(?i:(from|if))\\b|\\(reference\\)"
        },
        {
          "name": "keyword.language.articles.definite.plain",
          "match": "\\b(The)\\b"
        },
        {
          "name": "keyword.language.articles.indefinite.plain",
          "match": "\\b(A|An|Some)\\b"
        },
        {
          "name": "keyword.control.ajectives.plain",
          "match": "\\b(?i:(set|nil|original|next|previous|boid))\\b"
        },
        {
          "name": "keyword.control.prepositions.plain",
          "match": "\\b(?i:(about|above|across|after|against|all|alone|along|among|any|anywhere|around|as|at|away|back|backward|backwards|before|beginning|behind|below|beneath|beside|between|beyond|bigger|by|close|deep|diagonally|down|downward|ending|everywhere|except|finishing|facing|for|forward|from|given|giving|high|in|inside|into|larger|leaning|left|leftward|leftways|like|limiting|long|near|of|off|on|only|onto|out|outside|over|past|pointing|returning|right|rightward|rightways|shorter|sideway|sideways|similar|smaller|somewhere|slantwise|slantway|slantways|starting|tall|taller|thru|through|throughout|to|toward|towards|under|underneath|until|unto|up|upward|upon|using|via|while|wide|with|within|without))\\b"
        },
        {
          "name": "keyword.control.verbs.plain",
          "match": "\\b(?i:(are|be|can|can|could|do|does|exit|is|may|not|should|was|will|would|has|have|begins|ends|looks|needs|starts|loop|repeat|break|return|say))\\b"
        },
        {
          "name": "keyword.control.punctuation.accessor.plain",
          "match": "\\b(?<=\\w+)'s\\b"
        },
        {
          "name": "keyword.control.arithmeticoperators.plain",
          "match": "\\b(?i:(divided|and|plus|minus|times|neither|or|multiplied))\\b"
        },
        {
          "name": "keyword.other.comparisonoperators.plain",
          "match": "\\b(?i:(equal to|bigger|greater|than|less))\\b"
        },
        {
          "name": "keyword.other.concatenationoperators.plain",
          "match": "\\b(?i:(then))\\b"
        }
      ]
    },
    "markup": {
      "patterns": [
       
        {
          "name": "variable.parameter.plain",
          "match": "(?<=((\\b(the|a|an|another|some|'s|')\\b)|\\d)\\s*)([\\wÀ-ÿ_\\-\\'].*?)(?=( a | an | and | another | about | above | across | after | against | all | alone | along | among | any | anywhere | around | as | at | away | back | backward | backwards | before | beginning | behind | below | beneath | beside | between | beyond | bigger | both | but | by | called | close | deep | diagonally | divided | down | downward | either | equal | ending | everywhere | except | finishing | facing | first| first's | for | forward | from | given | giving | high | in | inside | into | larger | last| last's | leaning | left | leftward | leftways | like | limiting | long | minus | multiplied | near | neither | next's | nor | of | off | on | only | onto | or | out | outside | over | past | pointing | previous| previous' | returning | right | rightward | rightways | shorter | sideway | sideways | similar | smaller | some | somewhere | slantwise | slantway | slantways | starting | tall | taller | target | times | then | thru | through | throughout | to | toward | towards | under | underneath | until | unto | up | upward | upon | using | via | while | wide | with | within | without | are | be | can | can | could | do | does | is | may | should | was | will | would | has | have | begins | ends | looks | needs | starts |\\d|\"|\\[|\\:|,|\\.|;|\\()|(?=(\\:|;|\\()))"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.plain",
          "begin": "\"",
          "end": "\""
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "name": "entity.name.function.plain",
          "match": "\\b([\\wÀ-ÿ_\\-]+)\\b"
        }
      ]
    }
  },
  "scopeName": "source.plain"
}