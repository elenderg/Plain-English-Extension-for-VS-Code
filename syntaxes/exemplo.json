{
    "scopeName": "source.pascal",
    "fileTypes": [
        "pas"
    ],
    "name": "Pascal",
    "patterns": [
        {  "include": "#arguments"      },
        {  "include": "#comments"       },
        {  "include": "#function"       },
        {  "include": "#keywords"       },
        {  "include": "#numbers"        },
        {  "include": "#operators"      },
        {  "include": "#punctuation"    },
        {  "include": "#strings"        }       
    ],
    "entity": {
        "patterns": [
            {
                "name": "entity.name.struct.pop",
                "match": "\\b(?i:(estrutura|estruturas|registro||registros|lista|listas))\\b"
            },
            {
                "name": "entity.name.type.pop",
                "match": "\\b(?i:(byte|bytes|caractere|cor|identificador|número|ponteiro|sinalizador|string|tecla|texto|word))\\b"
            }
        ]
    }
    ,
    "strings": {
      "name": "string.quoted.double.pop",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.pop",
          "match": "\"\""
        }
      ]
    },
    "function": {
        "name": "function.pop",
        "match": "(?:para que se )(.*?)(?:usando?|um|uma|uns|umas|com|\\:)",
        "other": "(?:para que se )(.*?)(?:\\:)",
        "primeiro_nome": "/((?<=Rotina para que se ))([a-zA-Z0-9À-ÖØ-öø-ÿ]+)"

    },

    "repository": {
    
        "names": {
            "patterns": [
                {
                    "name": "entity.name.function.pop",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
                }
            ]
        },
        
		"meta":{
			"patterns": [
				{
					"name": "meta.variable.pop",
					"match": "\\b\\$[a-z][a-zA-Z0-9_]*\\b"
				}
			]

		},
        "function": {
			"name": "function.pop",
			"match": "(?:para que se )(.*?)(?:usando?|um|uma|uns|umas|com|\\:)"
		}
    ,
    "variable": {
      "name": "variable.pop",
      "match": "\\b[a-zA-Z0-9À-ÖØ-öø-ÿ_\\-]*\\b"
    }
        
    }
}
